use core::fmt;
use std::path::PathBuf;

use ferrite_utility::{line_ending::LineEnding, point::Point};

use crate::{buffer::case::Case, layout::panes::Direction};

#[derive(Debug, Clone, PartialEq, Eq)]
pub enum LineMoveDir {
    Up,
    Down,
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub enum Cmd {
    OpenFile(PathBuf),
    Cd(PathBuf),
    SaveFile(Option<PathBuf>),
    Language(Option<String>),
    Encoding(Option<String>),
    LineEnding(Option<LineEnding>),
    RunShellCmd {
        args: Vec<PathBuf>,
        pipe: bool,
    },
    OpenShellPalette,
    Case(Case),
    Split(Direction),
    ReplaceAll(String),
    Replace,
    Search,
    About,
    Path,
    Pwd,
    New(Option<PathBuf>),
    Reload,
    ReloadAll,
    Logger,
    ForceQuit,
    Quit,
    UrlOpen,
    Goto(i64),
    Indent(Option<String>),
    Theme(Option<String>),
    SortLines(bool),
    BufferPickerOpen,
    FilePickerOpen,
    FilePickerReload,
    OpenConfig,
    DefaultConfig,
    ForceClose,
    Close,
    ClosePane,
    Paste,
    Copy,
    Format,
    FormatSelection,
    GitReload,
    GitDiff,
    RevertBuffer,
    Trash,
    Repeat,
    MoveRight {
        expand_selection: bool,
    },
    MoveLeft {
        expand_selection: bool,
    },
    MoveUp {
        expand_selection: bool,
        distance: usize,
    },
    MoveDown {
        expand_selection: bool,
        distance: usize,
    },
    MoveRightWord {
        expand_selection: bool,
    },
    MoveLeftWord {
        expand_selection: bool,
    },
    Insert(String),
    Char(char),
    NewLine,
    MoveLine(LineMoveDir),
    Backspace,
    BackspaceWord,
    Delete,
    DeleteWord,
    ClickCell(usize, usize),
    SelectArea {
        cursor: Point<usize>,
        anchor: Point<usize>,
    },
    PromptGoto,
    Home {
        expand_selection: bool,
    },
    End {
        expand_selection: bool,
    },
    Eof {
        expand_selection: bool,
    },
    Start {
        expand_selection: bool,
    },
    SelectAll,
    SelectLine,
    SelectWord,
    Cut,
    PastePrimary(usize, usize),
    Tab {
        back: bool,
    },
    Undo,
    Redo,
    VerticalScroll(i64),
    ReplaceCurrentMatch,
    GlobalSearch,
    CaseInsensitive,
    NextMatch,
    PrevMatch,
    FocusPalette,
    OpenFileBrowser,
    OpenBufferBrowser,
    Escape,
    Save,
    GrowPane,
    ShrinkPane,
    Choord,
    ReopenBuffer,
    RotateFile,
}

impl Cmd {
    fn as_str(&self) -> &str {
        use Cmd::*;
        match self {
            Repeat { .. } => "repeat",
            MoveRight { .. } => "move right",
            MoveLeft { .. } => "move left",
            MoveUp { .. } => "move up",
            MoveDown { .. } => "move down",
            MoveRightWord { .. } => "move right word",
            MoveLeftWord { .. } => "move left word",
            Insert(s) => s.as_str(),
            Char(..) => "char",
            NewLine => "newline",
            MoveLine(LineMoveDir::Up) => "move line up",
            MoveLine(LineMoveDir::Down) => "move line down",
            Backspace => "backspace",
            BackspaceWord => "backspace word",
            Delete => "delete",
            DeleteWord => "delete word",
            ClickCell(_, _) => "set cursor pos",
            SelectArea { .. } => "select area",
            PromptGoto => "goto",
            Home { .. } => "home",
            End { .. } => "end",
            Eof { .. } => "end of file",
            Start { .. } => "start",
            SelectAll => "select all",
            SelectLine => "select line",
            SelectWord => "select word",
            Copy => "copy",
            Cut => "cut",
            Paste => "paste",
            PastePrimary(_, _) => "paste primary",
            Tab { .. } => "tab",
            Undo => "undo",
            Redo => "redo",
            RevertBuffer => "revert buffer",
            VerticalScroll(_) => "vertical scroll",
            Search => "search file",
            Replace => "replace",
            ReplaceCurrentMatch => "replace current match",
            GlobalSearch => "Global workspace search",
            CaseInsensitive => "case insensitive",
            NextMatch => "next match",
            PrevMatch => "prev match",
            FocusPalette => "open palette",
            OpenFileBrowser => "file browser",
            OpenBufferBrowser => "buffer browser",
            Escape => "escape",
            Save => "save",
            Quit => "quit",
            Close => "close buffer",
            ClosePane => "close pane",
            GrowPane => "grow pane",
            ShrinkPane => "shrink pane",
            Choord => "choord",
            Format => "Format",
            UrlOpen => "Open urls in selection",
            Split(Direction::Right) => "Split right",
            Split(Direction::Left) => "Split left",
            Split(Direction::Up) => "Split up",
            Split(Direction::Down) => "Split down",
            ReopenBuffer => "Reopen buffer",
            New(_) => "New",
            RotateFile => "Rotate file",
            OpenFile(_) => "Open file",
            Cd(_) => "Change project directory",
            SaveFile(_) => "Save buffer",
            Language(_) => "Language",
            Encoding(_) => "Encoding",
            LineEnding(_) => "Line ending",
            RunShellCmd { .. } => "Run shell command",
            OpenShellPalette { .. } => "Open shell command palette",
            Case(_) => "Case",
            ReplaceAll(_) => "Replace all",
            About => "About",
            Path => "Show filepath",
            Pwd => "pwd",
            Reload => "Reload",
            ReloadAll => "Reload all buffers",
            Logger => "Logger",
            ForceQuit => "Force quit",
            Goto(_) => "Goto",
            Indent(_) => "Indent",
            Theme(_) => "Theme",
            SortLines(_) => "Sort lines",
            BufferPickerOpen => "Open buffer picker",
            FilePickerOpen => "Open file picker",
            FilePickerReload => "Reload file picker",
            OpenConfig => "Open config file",
            DefaultConfig => "Open default config",
            ForceClose => "Force close buffer",
            FormatSelection => "Format selection",
            GitReload => "Git reload",
            GitDiff => "Git diff",
            Trash => "Move to trash",
        }
    }

    pub fn is_repeatable(&self) -> bool {
        use Cmd::*;
        match self {
            Repeat => false,
            MoveRight { .. } => true,
            MoveLeft { .. } => true,
            MoveUp { .. } => true,
            MoveDown { .. } => true,
            MoveRightWord { .. } => true,
            MoveLeftWord { .. } => true,
            Insert(..) => true,
            Char(..) => true,
            NewLine => true,
            MoveLine(..) => true,
            Backspace => true,
            BackspaceWord => true,
            Delete => true,
            DeleteWord => true,
            ClickCell(..) => false,
            SelectArea { .. } => false,
            PromptGoto => false,
            Home { .. } => true,
            End { .. } => true,
            Eof { .. } => false,
            Start { .. } => false,
            SelectAll => false,
            SelectLine => true,
            SelectWord => true,
            Copy => false,
            Cut => false,
            Paste => true,
            PastePrimary(..) => true,
            Tab { .. } => true,
            Undo => true,
            Redo => true,
            RevertBuffer => false,
            VerticalScroll(..) => true,
            Search => false,
            Replace => false,
            ReplaceCurrentMatch => true,
            GlobalSearch => false,
            CaseInsensitive => false,
            NextMatch => true,
            PrevMatch => true,
            FocusPalette => false,
            OpenFileBrowser => false,
            OpenBufferBrowser => false,
            Escape => false,
            Save => false,
            Quit => false,
            Close => false,
            ClosePane => false,
            GrowPane => true,
            ShrinkPane => true,
            Choord => false,
            Format => false,
            RunShellCmd { .. } => false,
            OpenShellPalette { .. } => false,
            Split { .. } => false,
            ReopenBuffer => false,
            RotateFile => false,
            OpenFile(_) => false,
            Cd(_) => false,
            SaveFile(_) => false,
            Language(_) => false,
            Encoding(_) => false,
            LineEnding(_) => false,
            Case(_) => false,
            ReplaceAll(_) => false,
            About => false,
            Path => false,
            Pwd => false,
            New(_) => false,
            Reload => false,
            ReloadAll => false,
            Logger => false,
            ForceQuit => false,
            UrlOpen => false,
            Goto(_) => false,
            Indent(_) => false,
            Theme(_) => false,
            SortLines(_) => false,
            BufferPickerOpen => false,
            FilePickerOpen => false,
            FilePickerReload => false,
            OpenConfig => false,
            DefaultConfig => false,
            ForceClose => false,
            FormatSelection => false,
            GitReload => false,
            GitDiff => false,
            Trash => false,
        }
    }
}

impl fmt::Display for Cmd {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        self.as_str().fmt(f)
    }
}
